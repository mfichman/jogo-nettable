# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

TableDesc < Object {
    # Describes an open table.  Usually, this contains the write permissions
    # for the table. 
    reader = Array[String](0) 
    writer = Array[String](0)
}

DataStore < Object {
    
    root = Table()
    # The root table of this data store.  Acts like the root directory in a
    # Unix filesystem; the root is ultimate ancestor of all local tables.

    tables = Array[Table](0)
    # List of all tables, ordered by ID.  FixMe: Use

    open(uri Uri::Path, flags String) Table {
        # Open a table at the given URI with the requested flags.  If the table
        # can't be opened (possibly because another process owns the table)
        # then this function returns nil.
        table var = root 
        for key in uri.str.split('/'b) {
            tmp var = table[key]
            if not tmp {
                if flags.contains('p'b) {
                    tmp = Table()
                } else {
                    ret nil
                } 
            } 
            table = tmp
        }
        ret table
    }
}

