# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

Val = Table|String|Int

#|Float

Table < Object {
    # Contains a key-value mapping that's serialized over the network.  Each
    # key can be a primitive, or another table.  When new keys are added, or
    # old keys are removed/deleted, the change is automatically synced over the
    # network to the peer.

    table private = Hash[String,Val]()
    # Hash of values -- this is the actual user data stored in the table.

    channels  = Queue[Chan[String]](0)
    # Channels to notify when a key changes.  A string is enqueued in each
    # registered channel whenever whenever the table is modified.

    flags private String
    # Defines the flags attached to this table.  If the table is read-only,
    # then 'r' will be in the flags set.

    @index(key String) Val {
        # Returns the value stored at the given index.  If the value is not
        # present, returns nil.
        ret table[key]
    }

    @insert(key String, val Val) {
        # Updates the value associated with the given key in the table.  For
        # each registered channel, the key is enqueued to notify the channel
        # that the table has changed.
        table[key] = val
        self.notify(key)
    }

    clear() {
        # Clear all entries from the hash table. If the hash table is modified
        # during a clear, the final state of the hash table may not be an empty
        # hash table.
        keys = Array[String](table.count) 
        for key in table.keys {
            keys.push(key)
        }
        table.clear()
        for key in keys {
            self.notify(key)
        }
    }

    iter() HashIter[String,Val] {
        # Iterates over all entries in the table. 
        ret table.iter()
    }
    
    subscribe(chan Chan[String]) {
        # Instructs the table to notify the given channel when it is modified.
        # When a value is writen using @insert, the corresponding key is
        # enqueued on any registered channels.
        channels.enq(chan) 
    }

    notify(key String) private {
        # Notify all the channels that a key in the table was modified
        count var = channels.count
        while count > 0 {
            chan = channels.deq()
            if chan.state == ChanState::OPEN {
                Io::println('notifying')
                chan.put(key)
                Io::println('notified')
                channels.enq(chan)
            }
            --count
        }
    }

    @equal(other Table) native Bool {
    }
}

watch(root Table, path String) Table {
    # Returns a channel that watches the table at the given path.  If the table
    # does not exist, this function blocks until it does.
    table var = root
    for key in path.split('/'b) {
        val var = table[key]
        tmp var Table
        if val {
            tmp = val
        }
        while not tmp {
            ch = Chan[String](0)
            table.subscribe(ch)
            ch.next()
            val = table[key]
            if val {
                tmp = val
            }
        } 
        table = tmp
    }
    ret table
}

#export(port Int) {
#    # Expose the given path for reading/writing by a remote process.
#}
#
#open(source String, flags String) Handle {
#    # Finds the table at the given endpoint, and creates a copy of it in this
#    # process' address space.  The table remains synchronized with the remote
#    # end, until the table is closed or the last reference to it drops.
#    # Opening a table is much like opening a file in a file system.  When
#    # opening a table, the following flags can be used: 
#    #
#    # r - open the table and all subtables for reading
#    # w - open the table and all subtables for writing (only one writer is allowed)
#    # c - create the table if it doesn't exist
#    # d - open in "directory mode"; that is, do not recursively open subtables
#    # p - recursively create parent tables if necessary
#    ret nil
#}
#
#test() {
#    t = NetTable::open('nt://localhost:8888/foo/bar', 'rw')
##    t['foo'] = 'bar'
##    Io::println(t['foo'])
##    for pair in t.iter() {
##        key String = pair.first
##        val String = pair.second.value
##        Io::println("#{key} => #{val}")
##        Io::println(pair.second.dirty.str)
##    }
#}
