# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

Id < Object {
    # Key used to identify tables in the reactor.  The ID is a short name for
    # the table's full path name.
    val Int

    @init(pval Int) {
        val = pval
    }

    @equal(other Id) Bool {
        ret val == other.val
    }

    hash?() Int {
        ret val.hash
    }
}

Reactor < Object {
    # Synchronizes tables over the given connection.  Whenever an "interesting"
    # table in the datastore changes, serialize the table to the stream.
    # Likewise, whenever data comes over the network, deserialize it and update
    # the corresponding table.  The reactor is modelled as two coroutines: one
    # for the "read from network" direction, and another for the "write to
    # network" direction (read() and write() below).

    cset private = ChanSet[Table,String]() # Channel for each table
    stream Stream # Connection to the remote peer
    data DataStore # Table file system 
    input = Table() # Tables that are requested to be open
    output = Table() # Tables that are acked open
    active var Table

    @init(pstream Io::Stream, pdata DataStore) {
        # Create a new reactor, which will synchronize the given datastore with
        # the given stream.
        stream = Stream(pstream)
        data = pdata
        stream.input[Id(1)] = input
        stream.output[output] = Id(1)

        ch = Chan[String](0)
        output.subscribe(ch)
        cset.chan(output, ch)
        
        this = self # FIXME!!
        opener = Coroutine() func() { this.open() }
        reader = Coroutine() func() { this.read() }
        writer = Coroutine() func() { this.write() }

        writer()
        Io::manager().task(writer)
        Io::manager().task(opener)
        Io::manager().task(reader)

        output['status'] = Table()
        output['open'] = Table()
    }

    read() { 
        # Read a stream of updates from the net and deserialize them to the
        # appropriate table.
        while stream.status == Io::StreamStatus::OK {
            msg = stream.getmsg()
            tid = Id(msg.id)
            table = stream.input[tid]
            if not table {
                Os::panic("Table #{msg.id} not found")
            } else {
                self.active = table
                table[msg.key] = msg.val
                self.active = nil
            } 
            if msg.val and msg.val is Table {
                tab Table = msg.val
                ch = Chan[String](0)
                tab.subscribe(ch)
                cset.chan(tab, ch)
            }
        }
    }

    write() {
        # Write a stream of updates to the net following an update to an
        # interesting table.
        for notif in cset {
            table = notif.first
            if active != table {
                key = notif.second
                tid = stream.output[table]
                msg = Msg(tid.val, key, table[key])

                if msg.val and msg.val is Table {
                    tab Table = msg.val
                    ch = Chan[String](0)
                    tab.subscribe(ch)
                    cset.chan(tab, ch)
                }
                stream.putmsg(msg)
                stream.flush()
            }
        }
    }

    open() {
        # Read a stream updates from the input table to determine which tables
        # the remote client has open.
        ch = Chan[String](0)
        open = watch(input, 'open')
        Io::println('opened')
        open.subscribe(ch)
        for uri in ch {
            flags String = open[uri]
            Io::println("open #{uri} #{flags}")
#            flags String = input[uri]
#            table = data.open(Uri::Path(uri), flags)
#            if table {
#                #output[uri] = table  
#            } else {
#                #output[uri] = 'error: table not found'
#                Io::println('error')
#            }
        }
    }
}
