# Copyright (c) 2010 Matt Fichman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, APEXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

Reactor < Object {
    # Synchronizes tables over the given connection.  Whenever an "interesting"
    # table in the datastore changes, serialize the table to the stream.
    # Likewise, whenever data comes over the network, deserialize it and update
    # the corresponding table.  The reactor is modelled as two coroutines: one
    # for the "read from network" direction, and another for the "write to
    # network" direction (read() and write() below).

    channel private = ChanSet[Table,String]() # Channel for each table
    stream Stream # Connection to the remote peer
    data DataStore # Table file system 
    request Table # Tables that are requested to be open
    response Table # Tables that are acked open

    @init(pstream Stream, pdata DataStore) {
        # Create a new reactor, which will synchronize the given datastore with
        # the given stream.
        stream = pstream
        data = pdata
        this = self # FIXME!!
        reader = Coroutine() func() { this.read() }
        writer = Coroutine() func() { this.write() }
    }

    read() { 
        # Read a stream of updates from the net and deserialize them to the
        # appropriate table.
        sd = stream 
        while sd.status == Io::StreamStatus::OK {
            if sd.peek() == 'o'b { # Special open message.  Intercept.
            } else if sd.peek() == 'k'b { # Special open ack.  Intercept. 
            } else {
            }
        }
    }

    write() {
        # Write a stream of updates to the net following an update to an
        # interesting table.
    }
}
